sep ::= [ \t]+
break ::= sep? ((";" | comment? "\n") sep?)+
lineBreak ::= sep? comment? ("\n" sep?)+
lineSep ::= lineBreak | sep
comment ::= "#" [^\n]*

root ::= break? (statement break)* statement? break?
statement ::= (declaration | assignment | returnStatement | expr) sep? comment?
return ::= "pass" | "return" ("@" name)?
returnStatement ::= return (lineSep expr)?
declaration ::= "$" sep? name sep? "=" lineSep? expr
assignment ::= expr sep? [-+/*]? "=" lineSep? expr

binaryOperator ::= "||" | "&&" | "==" | "<=" | ">=" | [-+*/^<>]
unaryOperator ::= [-!]

label ::= "`" name lineSep
expr ::= label? term (lineSep? binaryOperator lineSep? term)*
enclosedExpr ::= "(" lineSep? expr lineSep? ")"
term ::= (unaryOperator sep?)* value sep? tailOperationChain?
lambdaParameter ::= "$"
value ::= literal | enclosedExpr | name | lambdaParameter

alpha ::= [a-z] | [A-Z]
alphanum ::= [a-z] | [A-Z] | [0-9] | "_"
name ::= ("_" | alpha) alphanum*

literal ::= float | int | boolean | string | list | map | struct | function
int ::= "-"? [0-9]+
list ::= "[" lineSep? (expr (lineSep? "," lineSep? expr)*)? lineSep? "]"
mapEntry ::= expr lineSep? ":" lineSep? expr
emptyMap ::= "[" lineSep? ":" lineSep? "]"
map ::= emptyMap | "[" lineSep? mapEntry (lineSep? "," lineSep? mapEntry)* lineSep? "]"
structField ::= name (sep? typeAnnotation)?
struct ::= "<" lineSep? (structField (lineSep? "," lineSep? structField)*)? ">"
float ::= ("-"? [0-9]+)? "." [0-9]+
string ::= "\"" (escapeSequence | [^"])* "\""
escapeSequence ::= "\\" [^]
boolean ::= "true" | "false"

invoke ::= invokeArgs | functionBody
invokeArgs ::= "(" lineSep? (expr lineSep? ("," sep? lineSep)*)? sep? ")"

functionArg ::= name (sep? typeAnnotation)?
typeAnnotation ::= ":" lineSep? name
functionBody ::= "{" break? (statement break)* statement? break? "}"
functionArgs ::= "(" lineSep? (functionArg lineSep? ("," lineSep? functionArg)*)? lineSep? ")"
function ::= functionArgs? lineSep? functionBody

receiverCall ::= "." lineSep? name sep? invoke
index ::= "[" expr "]"
tailOperation ::= invoke | receiverCall | index
tailOperationChain ::= tailOperation (lineSep? tailOperation)*